     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  global _sum_num
     3                                  ; the linker may use the public data segment for external datta
     4                                  segment data public data use32
     5                                  
     6                                  ; the code written in assembly language resides in a public segment, that may be shared with external code
     7                                  segment code public code use32
     8                                      _sum_num:
     9                                          ; ...
    10                                      
    11 00000000 55                              push ebp
    12 00000001 89E5                            mov ebp, esp
    13                                          
    14                                          ; retreive the function's arguments from the stack
    15                                          ; [ebp+4] contains the return value 
    16                                          ; [ebp] contains the ebp value for the caller
    17 00000003 8B4508                          mov eax, [ebp + 8]        ; eax <- a
    18                                          
    19 00000006 8B5D0C                          mov ebx, [ebp + 12]        ; ebx <- b
    20                                          
    21 00000009 01D8                            add eax, ebx            ; compute the sum
    22                                                                  ; the return value of the function should be in EAX
    23                                  
    24                                          ; restore the stack frame
    25 0000000B 89EC                            mov esp, ebp
    26 0000000D 5D                              pop ebp
    27                                  
    28 0000000E C3                              ret
    29                                      ; cdecl call convention - the caller will remove the parameters from the stack
    30                                          ; exit(0)
    31 0000000F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    32                                          call    [exit]       ; call exit to terminate the program
    32          ******************       error: symbol `exit' undefined
