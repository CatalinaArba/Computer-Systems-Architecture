     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                     
    15 00000000 3132333435                  s2 db '1','2','3','4','5'
    16                                      l2 equ $-s2    
    17 00000005 616263646566                s1 db 'a','b','c','d','e','f'
    18                                      l1 equ $-s1
    19                                      
    20 0000000B 00<rept>                    d times l2 db 0
    21                                      
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26                                      ;Two character strings S1 and S2 are given. Obtain the string D by concatenating the elements found on even positions in S2 and the elements found on odd positions in S1.
    27                                      ;S1: 'a', 'b', 'c', 'd', 'e', 'f'
    28                                      ;S2: '1', '2', '3', '4', '5'
    29                                      ;D: '2', '4','a','c','e'
    30                                      
    31 00000000 B905000000                      mov ecx,l2
    32 00000005 BE00000000                      mov esi,0
    33                                          
    34 0000000A BF00000000                      mov edi,0
    35 0000000F E310                            jecxz Sfarsit1
    36                                          Repeta1:
    37 00000011 8A86[00000000]                      mov al, [s2+esi]
    38 00000017 8887[0B000000]                      mov [d+edi],al
    39 0000001D 46                                  inc esi
    40                                              ;inc esi
    41 0000001E 47                                  inc edi
    42 0000001F E2F0                            loop Repeta1
    43                                          Sfarsit1:
    44                                          
    45 00000021 B900000000                      mov ecx,0
    46 00000026 B906000000                      mov ecx,l1
    47 0000002B BE00000000                      mov esi,0
    48                                   
    49 00000030 E311                            jecxz Sfarsit2
    50                                          Repeta2:
    51 00000032 8A86[05000000]                      mov al, [s1+esi]
    52 00000038 8887[0B000000]                      mov [d+edi],al
    53 0000003E 46                                  inc esi
    54 0000003F 46                                  inc esi
    55 00000040 47                                  inc edi
    56 00000041 E2EF                            loop Repeta2
    57                                          Sfarsit2:    
    58                                          
    59                                          ; exit(0)
    60 00000043 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 00000045 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
