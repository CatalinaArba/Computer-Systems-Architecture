     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf             ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll 
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 486F77206D616E7920-         format1 db "How many numbers do you want to read?",0
    16 00000009 6E756D626572732064-
    16 00000012 6F20796F752077616E-
    16 0000001B 7420746F2072656164-
    16 00000024 3F00               
    17 00000026 256400                      format2 db"%d",0
    18 00000029 746865206E756D6265-         format3 db "the number is:%d",10,13,0
    18 00000032 722069733A25640A0D-
    18 0000003B 00                 
    19 0000003C 00000000                    n dd 0
    20 00000040 <res 00000064>              s resb 100
    21 000000A4 00000000                    len dd 0
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 68[00000000]                    push format1
    28 00000005 FF15[00000000]                  call [printf]
    29 0000000B 83C404                          add esp,4
    30                                          
    31 0000000E 68[3C000000]                    push n
    32 00000013 68[26000000]                    push format2
    33 00000018 FF15[00000000]                  call [scanf]
    34 0000001E 83C408                          add esp, 4*2
    35                                          
    36 00000021 8B0D[3C000000]                  mov ecx,[n]
    37 00000027 BE[40000000]                    mov esi,s
    38                                          
    39                                          start_loop:
    40 0000002C 890D[A4000000]                      mov [len],ecx
    41                                              
    42 00000032 60                                  pushad
    43 00000033 56                                  push dword esi
    44 00000034 68[26000000]                        push format2
    45 00000039 FF15[00000000]                      call [scanf]
    46 0000003F 83C408                              add esp,4*2
    47 00000042 61                                  popad
    48                                              
    49 00000043 83C604                              add esi,4
    50 00000046 8B0D[A4000000]                      mov ecx,[len]
    51 0000004C E2DE                            loop start_loop
    52                                          
    53 0000004E 8B0D[3C000000]                  mov ecx,[n]
    54 00000054 BE[40000000]                    mov esi,s
    55                                          start_loop2:
    56 00000059 890D[A4000000]                      mov [len],ecx
    57 0000005F AD                                  lodsd
    58                                              
    59 00000060 60                                  pushad
    60 00000061 50                                  push dword eax
    61 00000062 68[29000000]                        push format3
    62 00000067 FF15[00000000]                      call [printf]
    63 0000006D 83C408                              add esp,4*2
    64 00000070 61                                  popad
    65                                              
    66 00000071 8B0D[A4000000]                      mov ecx,[len]
    67 00000077 E2E0                            loop start_loop2
    68                                              
    69                                              
    70                                              
    71                                          
    72                                          
    73                                          
    74                                      
    75                                          ; exit(0)
    76 00000079 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 0000007B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
