     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                      ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 546865207065726D75-         format db "The permutation is:%x",10,13,0
    17 00000009 746174696F6E206973-
    17 00000012 3A25780A0D00       
    18 00000018 00000000                    n dd 0
    19 0000001C 64000000                    cn dd 100;the copy of n
    20 00000020 256400                      formats db "%d",0
    21 00000023 546865206E756D6265-         m db "The number is:",0
    21 0000002C 722069733A00       
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                      ;prinf 
    27 00000000 68[23000000]                push dword m
    28 00000005 FF15[00000000]              call [printf]
    29 0000000B 83C404                      add esp,4
    30                                      ;scanf(%d,&n)
    31 0000000E 68[18000000]                push dword n
    32 00000013 68[20000000]                push dword formats
    33 00000018 FF15[00000000]              call [scanf]
    34 0000001E 83C408                      add esp,4*2
    35                                      
    36 00000021 A1[18000000]                mov eax,[n]
    37 00000026 8B15[18000000]              mov edx,[n]
    38                                      
    39                                      permutation:   
    40                                          
    41 0000002C A3[1C000000]                    mov [cn],eax
    42 00000031 60                              pushad
    43 00000032 50                              push dword eax
    44 00000033 68[00000000]                    push dword format
    45 00000038 FF15[00000000]                  call [printf]
    46 0000003E 83C608                          add esi,4*2
    47 00000041 61                              popad
    48 00000042 A1[1C000000]                    mov eax,[cn]
    49                                          ;mov eax,[cn]
    50 00000047 C1C004                          rol eax,4
    51 0000004A 8B15[18000000]                  mov edx,[n]
    52 00000050 39D0                            cmp dword eax,dword edx
    53 00000052 7402                            je endofprogram
    54 00000054 EBD6                        jmp permutation
    55                                      endofprogram:
    56                                  
    57                                      
    58                                          
    59                                          
    60                                      
    61                                      
    62                                          ; ...
    63                                      
    64                                          ; exit(0)
    65 00000056 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000058 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
