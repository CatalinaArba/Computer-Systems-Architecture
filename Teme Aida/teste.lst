     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;a dd 1A2B3CH, 4D9FH, 6E27H
    15                                      ;a db '123', '4', '56'
    16                                      ;b resd 1
    17                                      ;c dw 4-1, 3
    18                                   
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          
    24                                          ;mov al, 250>>4 ; 15
    25                                          ;mov al, 0ffffh>>4 ; -1
    26                                          ;mov al, 0efffh>>12; 14
    27                                          ;mov al, -1>>4; -1
    28                                          ;mov al, -1>>12 ; -1
    29                                          ;sbb al,al
    30                                          ;mov al, 0
    31                                          ;mov al, -2
    32                                          ;mov bl, -128
    33                                          ;imul al
    34                                          
    35                                          ;mov bx, [a+5]
    36                                          
    37                                          ;mov al, -2
    38                                          ;mov bl, -128
    39                                          ;mul al
    40                                          ;or EAX, EAX
    41                                          ;mov cl, 11h
    42                                          ;rcr ax, cl
    43                                          
    44                                          
    45                                          ;mov al, 255
    46                                          ;add al, -1
    47                                         
    48                                         ;mov ax, 65535
    49                                         ;cwd
    50                                         ;mov bx, 7
    51                                         ;div bx
    52                                          
    53                                          
    54                                          ;mov ax, 65535
    55                                          ;mov bl, 10
    56                                          ;div bl
    57                                          
    58                                          
    59                                          ;mov ah, 11111111b
    60                                          ;mov al, -1
    61                                          ;add ah, al
    62 00000000 66F7E0                          mul ax
    63                                          
    64                                          
    65                                          ; exit(0)
    66 00000003 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    67 00000005 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
