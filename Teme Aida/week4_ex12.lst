     1                                  ;Given the words A and B, compute the doubleword C as follows:
     2                                  
     3                                     ; the bits 0-6 of C have the value 0
     4                                     ; the bits 7-9 of C are the same as the bits 0-2 of A
     5                                     ; the bits 10-15 of C are the same as the bits 8-13 of B
     6                                     ; the bits 16-31 of C have the value 1 
     7                                  
     8                                  bits 32 ; assembling for the 32 bits architecture
     9                                  
    10                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    11                                  global start        
    12                                  
    13                                  ; declare external functions needed by our program
    14                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    15                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    16                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    17                                  
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20                                      ; ...
    21 00000000 F958                        a dw 0101100011111001b
    22 00000002 14E1                        b dw 1110000100010100b
    23 00000004 00000000                    c dd 0
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          
    29 00000000 BB00000000                      mov EBX, 0; we compute the result in EBX
    30                                          
    31 00000005 83E380                          and EBX, 11111111111111111111111110000000b; we force the value of bits 0-6 of the result to the value 0 => EBX = 0000 0000 0000 0000 0000 0000 0000 0000b = 00000000(hex)
    32                                          
    33 00000008 B800000000                      mov EAX, 0
    34 0000000D 66A1[00000000]                  mov AX, [a]
    35                                          ;mov EAX, [a]
    36 00000013 83E007                          and EAX, 00000000000000000000000000000111b
    37 00000016 B107                            mov CL, 7
    38 00000018 D3C0                            rol EAX, CL; we rotate 7 positions to the left => EAX = 0000 0000 0000 0000 0000 0000 1000 0000b
    39 0000001A 09C3                            or EBX, EAX; we put the bits in the result => EBX =  0000 0000 0000 0000 0000 0000 1000 0000 = 00000080(hex)
    40                                          
    41 0000001C B800000000                      mov EAX, 0
    42 00000021 66A1[02000000]                  mov AX, [b]
    43                                          ;mov EAX, [b]
    44 00000027 25003F0000                      and EAX, 00000000000000000011111100000000b
    45 0000002C B102                            mov CL, 2
    46 0000002E D3C0                            rol EAX, CL; we rotate 2 positions to the left => EAX = 0000 0000 0000 0000 1000 0100 0000 0000b
    47 00000030 09C3                            or EBX, EAX; we put the bits in the result =>     EBX = 0000 0000 0000 0000 1000 0100 1000 0000b = 00008480(hex)
    48                                          
    49 00000032 81CB0000FFFF                    or EBX, 11111111111111110000000000000000b; we force the value of bits 16-31 of the result to the value 1 => EBX = 1111 1111 1111 1111 1000 0100 1000 0000b = FFFF8480(hex)
    50                                          
    51                                          
    52 00000038 891D[04000000]                  mov [c], EBX
    53                                          
    54                                    
    55                                          ; exit(0)
    56 0000003E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 00000040 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
