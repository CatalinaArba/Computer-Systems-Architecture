     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll 
     9                                  import printf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 23147586BCAD                a dw 1423h, 8675h, 0ADBCh
    16                                      len equ ($-a)
    17                                      ;b times len dw 0
    18 00000006 <res 00000064>              b resb 100
    19 0000006A 25780A0D00                  format db "%x", 10, 13, 0
    20 0000006F 00000000                    number dd 0
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; An array of words is given. Write an asm program in order to obtain an array of doublewords, 
    26                                          ;where each doubleword will contain each nibble unpacked on a byte (each nibble will be preceded by a 0 digit), 
    27                                          ;arranged in an ascending order within the doubleword. 
    28                                          ; 1432h, 8675h, 0ADBCh, ... = 01020304h, 05060708h, 0A0B0C0Dh, ...
    29                                          
    30 00000000 BE[00000000]                    mov esi, a
    31 00000005 FC                              cld
    32 00000006 B906000000                      mov ecx, len
    33 0000000B BF[06000000]                    mov edi, b
    34 00000010 BA00000000                      mov edx, 0
    35                                          do:
    36 00000015 AC                                  lodsb; al = 23
    37 00000016 88C3                                mov bl, al
    38 00000018 240F                                and al, 00001111b
    39 0000001A 8807                                mov [edi], al
    40 0000001C 47                                  inc edi
    41                                              ;mov al, 0
    42                                              ;lodsb
    43 0000001D 88D8                                mov al, bl
    44 0000001F C0E804                              shr al, 4
    45 00000022 240F                                and al, 00001111b
    46 00000024 8807                                mov [edi], al
    47                                             
    48 00000026 47                                  inc edi
    49                                              
    50 00000027 E2EC                            loop do
    51                                          
    52 00000029 BE[06000000]                    mov esi, b
    53 0000002E B906000000                      mov ecx, len
    54                                          print:
    55 00000033 8B06                                mov eax, [esi]
    56 00000035 83E0FF                              and eax, 11111111111111111111111111111111b
    57 00000038 A3[6F000000]                        mov dword[number], eax
    58 0000003D 51                                  push ecx
    59 0000003E FF35[6F000000]                      push dword [number]
    60 00000044 68[6A000000]                        push dword format
    61 00000049 FF15[00000000]                      call [printf]
    62 0000004F 83C408                              add esp, 4*2
    63 00000052 83C602                              add esi, 2
    64 00000055 59                                  pop ecx
    65                                              
    66 00000056 E2DB                            loop print
    67                                         
    68                                         
    69                                          
    70                                          
    71                                          
    72                                          ; exit(0)
    73 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    74 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
