     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 00000000                    a dd 0
    16 00000004 00000000                    b dd 0
    17 00000008 256400                      formatr db "%d", 0
    18 0000000B 5772697465206E756D-         format db "Write number %d", 10, 13, 0
    18 00000014 6265722025640A0D00 
    19 0000001D 01000000                    result dd 1
    20                                  
    21                                      
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ... Read two numbers a and b (in base 10) from the keyboard and calculate their product. 
    27                                          ;This value will be stored in a variable called "result" (defined in the data segment). 
    28                                          
    29 00000000 68[00000000]                    push dword a
    30 00000005 68[08000000]                    push dword formatr
    31 0000000A FF15[00000000]                  call [scanf]
    32 00000010 83C408                          add esp, 4*2
    33                                          
    34 00000013 8A1D[00000000]                  mov bl, [a]
    35                                          
    36                                          
    37 00000019 68[04000000]                    push dword b
    38 0000001E 68[08000000]                    push dword formatr
    39 00000023 FF15[00000000]                  call [scanf]
    40 00000029 83C408                          add esp, 4*2
    41                                          
    42 0000002C A0[04000000]                    mov al, [b]
    43                                          
    44 00000031 F6E3                            mul bl
    45                                         ; mov al, [a]
    46                                          ;mov bl, [b]
    47                                          ;mul bl
    48 00000033 66A3[1D000000]                  mov [result], ax
    49                                          
    50 00000039 FF35[1D000000]                  push dword [result]
    51 0000003F 68[0B000000]                    push dword format
    52 00000044 FF15[00000000]                  call [printf]
    53 0000004A 83C408                          add esp, 4*2
    54                                              
    55                                              
    56                                          
    57                                          
    58                                          
    59                                          
    60                                          
    61                                          
    62                                          
    63                                          
    64                                         
    65                                          
    66                                          
    67                                          
    68                                          
    69                                          
    70                                          
    71                                      
    72                                          ; exit(0)
    73 0000004D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    74 0000004F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
