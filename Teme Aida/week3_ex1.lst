     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 3C                          a db 60
    14 00000001 0A00                        b dw 10
    15 00000003 32000000                    c dd 50
    16 00000007 FA00000000000000            d dq 250
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; (a+b+d)-(a-c+d)+(b-c) 
    22 00000000 8B1D[00000000]                  mov EBX, [a]
    23 00000006 031D[01000000]                  add EBX, [b]; EBX <-EBX+b = 60+10 = 70 ; EBX = a+b
    24                                          
    25 0000000C 0305[07000000]                  add EAX, [d]; EAX <- EAX+d = 70+250 = 320; EAX = a+b+d
    26 00000012 BA00000000                      mov EDX, 0; EAX -> EDX:EAX
    27 00000017 89D8                            mov EAX, EBX ; EAX <- EBX
    28                                          
    29                                          
    30                                          ;mov ECX, [a]
    31                                          ;sub ECX, [c]; ECX <- ECX-c = a-c = 50; ECX = a-c
    32                                          
    33                                         ; mov 
    34                                         ; mov EBX, BX
    35                                         ; add EBX, [d] ; EBX <- EBX+d = 50+250 = 300; EBX = a-c+d
    36                                          
    37                                         ; sub EAX, EBX; EAX <- EAX-EBX = 320-300 = 20 ; EAX = (a+b+d)-(a-c+d)
    38                                          
    39                                          
    40                                          
    41                                          
    42                                          
    43                                          
    44                                      
    45                                          ; exit(0)
    46 00000019 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 0000001B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
