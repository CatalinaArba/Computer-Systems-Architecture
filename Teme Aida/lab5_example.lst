     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 6162636D6E                  s db 'a', 'b', 'c', 'm','n' ; declare the string of bytes
    15                                  	l equ $-s ; compute the length of the string in l
    16 00000005 00<rept>                	d times l db 0 ; reserve l bytes for the destination string and initialize it
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 B905000000                      mov ecx, l ; we put the length l in ECX in order to make the loop
    23 00000005 BE00000000                      mov esi, 0     
    24 0000000A E313                            jecxz Sfarsit      
    25                                          Repeta:
    26 0000000C 8A86[00000000]                      mov al, [s+esi]
    27 00000012 B320                                mov bl, 'a'-'A' ; in order to obtain the corresponding upper case letter, we will decrease the ASCII CODE
    28                                              ; of 'a'-'A' from the lower case letter AL
    29 00000014 28D8                                sub al, bl             
    30 00000016 8886[05000000]                      mov [d+esi], al    
    31 0000001C 46                                  inc esi
    32 0000001D E2ED                            loop Repeta
    33                                          Sfarsit:;end of the program
    34                                      
    35                                          ; exit(0)
    36 0000001F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    37 00000021 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
