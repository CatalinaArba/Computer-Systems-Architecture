     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 E2                          a db -30
    15 00000001 ECFF                        b dw -20
    16 00000003 05000000                    c dd 5
    17 00000007 2800000000000000            d dq 40
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22                                          ;(a-b-c)+(d-b-c)-(a-d)
    23                                          ;a - byte, b - word, c - double word, d - qword -
    24                                          ;Signed representation
    25                                          ;a-b-c
    26 00000000 A0[00000000]                    mov AL,[a];      AL=a=-30
    27 00000005 6698                            cbw;             AX=AL=a=-30
    28 00000007 662B05[01000000]                sub AX,[b];        AX=a-b=-30-(-20)=-10
    29 0000000E 6699                            cwd;
    30 00000010 6652                            push DX
    31 00000012 6650                            push AX
    32 00000014 58                              pop EAX;        EAX=a-b=-10
    33 00000015 2B05[03000000]                  sub EAX,[c];      EAX=a-b-c=-10-5=-15
    34 0000001B 89C1                            mov ECX,EAX;    ECX=EAX=a-b-c
    35                                          
    36                                          ;d-b-c
    37 0000001D 8B1D[07000000]                  mov EBX,[d];
    38 00000023 8B15[0B000000]                  mov Edx,[d+4]
    39 00000029 66A1[01000000]                  mov AX,[b];       AX=b=-20
    40 0000002F 6699                            cwd;            DX:AX=AX=b=-20
    41 00000031 6652                            push DX
    42 00000033 6650                            push AX
    43 00000035 58                              pop EAX;        EAX=DX:AX=AX=b=-20
    44 00000036 29C3                            sub EBX,EAX;    EBX=EBX-EAX=d-b=40-(-20)=60
    45 00000038 2B1D[03000000]                  sub EBX,[c];    EBX=d-b-c=60-5=55
    46                                          
    47                                          
    48                                          ; exit(0)
    49 0000003E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000040 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
